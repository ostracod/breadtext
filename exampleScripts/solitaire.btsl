
# Card structure:
# [value, suit, isVisible]

# Card values:
# 1 = ace
# 2 through 10 = number
# 11 = jack
# 12 = queen
# 13 = king

# Card suits:
# 0 = spade
# 1 = club
# 2 = heart
# 3 = diamond

# Card position structure:
# [type, index, pileIndex]

# Card position types:
# 0 = deck
# 1 = tableau
# 2 = foundation

dec CARD_VALUE = 0
dec CARD_SUIT = 1
dec CARD_IS_VISIBLE = 2

dec CARD_POS_TYPE = 0
dec CARD_POS_INDEX = 1
dec CARD_POS_PILE_INDEX = 2

dec CARD_POS_TYPE_DECK = 0
dec CARD_POS_TYPE_TABLEAU = 1
dec CARD_POS_TYPE_FOUNDATION = 2

dec deck
dec deckIndex
dec deckStartIndex
dec foundations
dec tableau
dec cursorPos
dec selectionPos

dec boardHeight = 24
dec suitCharacterSet = ['s', 'c', 'H', 'D']

func pushElement(sequence, element)
    ins(sequence, len(sequence), element)
end

func popElement(sequence)
    dec index = len(sequence) - 1
    dec output = sequence[index]
    rem(sequence, index)
    ret output
end

func populateDeck()
    dec cardList = []
    dec value = 1
    dec suit = 0
    while suit < 4
        pushElement(cardList, [value, suit, true])
        value += 1
        if value > 13
            value = 1
            suit += 1
        end
    end
    while len(cardList) > 0
        dec index = floor(rand() * len(cardList))
        dec card = cardList[index]
        rem(cardList, index)
        pushElement(deck, card)
    end
end

func seekBeginningOfDeck()
    deckStartIndex = 0
    deckIndex = 0
    while deckIndex < 2
        if deckIndex >= len(deck) - 1
            break
        end
        deckIndex += 1
    end
end

func seekNextDeckCard()
    if deckIndex < 0 || deckIndex >= len(deck) - 1
        seekBeginningOfDeck()
        ret
    end
    deckStartIndex = deckIndex + 1
    dec count = 0
    while deckIndex < len(deck) - 1 && count < 3
        deckIndex += 1
        count += 1    
    end
end

func dealTableau()
    dec count = 0
    while count < 7
        dec index = count
        while index < 7
            dec pile = tableau[index]
            dec card = popElement(deck)
            pushElement(pile, card)
            index += 1
        end
        count += 1
    end
    dec index = 0
    while index < 7
        dec pile = tableau[index]
        dec pileIndex = 0
        while pileIndex < len(pile)
            dec card = pile[pileIndex]
            card[CARD_IS_VISIBLE] = (pileIndex >= len(pile) - 1)
            pileIndex += 1
        end
        index += 1
    end
end

func drawCharacter(posX, posY, character)
    setCursorPos(posX, posY)
    pressKey('D')
    pressKey(character)
    setMode(MODE_COMMAND)
end

func drawText(posX, posY, text)
    dec index = 0
    while index < len(text)
        dec character = text[index]
        drawCharacter(posX + index, posY, character)
        index += 1
    end
end

func eraseCard(posX, posY)
    drawText(posX, posY, "   ")
end

func drawCard(posX, posY, card)
    dec isVisible = card[CARD_IS_VISIBLE]
    if !isVisible
        drawText(posX, posY, "???")
        ret
    end
    dec value = card[CARD_VALUE]
    dec suit = card[CARD_SUIT]
    dec text = "   "
    text[2] = suitCharacterSet[suit]
    if value == 1
        text[1] = 'A'
    else if value >= 2 && value <= 9
        text[1] = '0' + value
    else if value == 10
        text[0] = '1'
        text[1] = '0'
    else if value == 11
        text[1] = 'J'
    else if value == 12
        text[1] = 'Q'
    else if value == 13
        text[1] = 'K'
    end
    drawText(posX, posY, text)
end

func convertCardPosToCharPos(cardPos)
    dec type = cardPos[CARD_POS_TYPE]
    dec index = cardPos[CARD_POS_INDEX]
    dec pileIndex = cardPos[CARD_POS_PILE_INDEX]
    if type == CARD_POS_TYPE_DECK
        dec posY
        if deckIndex >= 0
            posY = 3 - (deckIndex - deckStartIndex)
        else
            posY = 3
        end
        ret [0, posY]
    end
    if type == CARD_POS_TYPE_TABLEAU
        ret [index * 5, 5 + pileIndex]
    end
    if type == CARD_POS_TYPE_FOUNDATION
        ret [15 + index * 5, 3]
    end
end

func getCardAtPos(cardPos, isDestination)
    dec type = cardPos[CARD_POS_TYPE]
    dec index = cardPos[CARD_POS_INDEX]
    dec pileIndex = cardPos[CARD_POS_PILE_INDEX]
    if type == CARD_POS_TYPE_DECK
        if deckIndex >= 0 && deckIndex < len(deck)
            ret deck[deckIndex]
        else
            ret null
        end
    end
    if type == CARD_POS_TYPE_TABLEAU
        dec pile = tableau[index]
        if isDestination
            if len(pile) > 0
                ret pile[len(pile) - 1]
            else
                ret null
            end
        else
            if pileIndex >= 0 && pileIndex < len(pile)
                ret pile[pileIndex]
            else
                ret null
            end
        end
    end
    if type == CARD_POS_TYPE_FOUNDATION
        dec pile = foundations[index]
        if len(pile) > 0
            ret pile[len(pile) - 1]
        else
            ret null
        end
    end
end

func eraseTableauPile(index)
    dec cardPos = [CARD_POS_TYPE_TABLEAU, index, 0]
    dec pileIndex = 0
    while pileIndex < 19
        cardPos[CARD_POS_PILE_INDEX] = pileIndex
        dec pos = convertCardPosToCharPos(cardPos)
        eraseCard(pos[0] + 1, pos[1])
        pileIndex += 1
    end
end

func drawTableauPile(index)
    dec cardPos = [CARD_POS_TYPE_TABLEAU, index, 0]
    dec pile = tableau[index]
    dec pileIndex = 0
    while pileIndex < len(pile)
        dec card = pile[pileIndex]
        cardPos[CARD_POS_PILE_INDEX] = pileIndex
        dec pos = convertCardPosToCharPos(cardPos)
        drawCard(pos[0] + 1, pos[1], card)
        pileIndex += 1
    end
end

func drawTableau()
    dec index = 0
    while index < 7
        drawTableauPile(index)
        index += 1
    end
end

func eraseDeck()
    drawText(1, 0, "   ")
    drawText(1, 1, "   ")
    drawText(1, 2, "   ")
    drawText(1, 3, "   ")
end

func drawDeck()
    dec index = deckIndex
    dec count = 0
    while index >= 0 && index >= deckStartIndex
        dec card = deck[index]
        drawCard(1, 3 - (deckIndex - deckStartIndex) + count, card)
        index -= 1
        count += 1
    end
    if count == 0
        drawText(1, 3, "---")
    end
    if deckIndex < len(deck) - 1
        drawText(1, 0, "???")
    else
        drawText(1, 0, "---")
    end
end

func drawFoundations()
    dec cardPos = [CARD_POS_TYPE_FOUNDATION, 0, 0]
    dec index = 0
    while index < 4
        dec pile = foundations[index]
        cardPos[CARD_POS_INDEX] = index
        dec pos = convertCardPosToCharPos(cardPos)
        if len(pile) <= 0
            dec text = "( )"
            text[1] = suitCharacterSet[index]
            drawText(pos[0] + 1, pos[1], text)
        else
            dec card = pile[len(pile) - 1]
            drawCard(pos[0] + 1, pos[1], card)
        end
        index += 1
    end
end

func moveCursorToFirstVisibleCard()
    dec type = cursorPos[CARD_POS_TYPE]
    dec index = cursorPos[CARD_POS_INDEX]
    if type != CARD_POS_TYPE_TABLEAU
        ret
    end
    dec pile = tableau[index]
    dec pileIndex = 0
    while pileIndex < len(pile) - 1
        dec card = pile[pileIndex]
        if card[CARD_IS_VISIBLE]
            break
        end
        pileIndex += 1
    end
    cursorPos[CARD_POS_PILE_INDEX] = pileIndex
end

func moveCursor(offsetX, offsetY)
    dec type = cursorPos[CARD_POS_TYPE]
    dec index = cursorPos[CARD_POS_INDEX]
    dec pileIndex = cursorPos[CARD_POS_PILE_INDEX]
    if type == CARD_POS_TYPE_TABLEAU
        if offsetX < 0
            if index > 0
                cursorPos[CARD_POS_INDEX] = index - 1
                moveCursorToFirstVisibleCard()
            end
        end
        if offsetX > 0
            if index < 6
                cursorPos[CARD_POS_INDEX] = index + 1
                moveCursorToFirstVisibleCard()
            end
        end
        if offsetY < 0
            dec hasMoved = false
            if pileIndex > 0
                dec pile = tableau[index]
                dec card = pile[pileIndex - 1]
                if card[CARD_IS_VISIBLE]
                    cursorPos[CARD_POS_PILE_INDEX] = pileIndex - 1
                    hasMoved = true
                end
            end
            if !hasMoved
                if index < 3
                    cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_DECK
                else
                    cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_FOUNDATION
                    cursorPos[CARD_POS_INDEX] = index - 3
                end
            end
        end
        if offsetY > 0
            dec pile = tableau[index]
            if pileIndex < len(pile) - 1
                cursorPos[CARD_POS_PILE_INDEX] = pileIndex + 1
            end
        end
    else if type == CARD_POS_TYPE_DECK
        if offsetX > 0
            cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_FOUNDATION
            cursorPos[CARD_POS_INDEX] = 0
        end
        if offsetY > 0
            cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_TABLEAU
            cursorPos[CARD_POS_INDEX] = 0
            moveCursorToFirstVisibleCard()
        end
    else if type == CARD_POS_TYPE_FOUNDATION
        if offsetX < 0
            if index > 0
                index -= 1
                cursorPos[CARD_POS_INDEX] = index
            else
                cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_DECK
            end
        end
        if offsetX > 0
            if index < 3
                index += 1
                cursorPos[CARD_POS_INDEX] = index
            end
        end
        if offsetY > 0
            cursorPos[CARD_POS_TYPE] = CARD_POS_TYPE_TABLEAU
            cursorPos[CARD_POS_INDEX] = index + 3
            moveCursorToFirstVisibleCard()
        end
    end
end

func eraseSelection()
    dec pos = convertCardPosToCharPos(selectionPos)
    drawCharacter(pos[0], pos[1], ' ')
    drawCharacter(pos[0] + 4, pos[1], ' ')
end

func drawSelection()
    dec pos = convertCardPosToCharPos(selectionPos)
    drawCharacter(pos[0], pos[1], '>')
    drawCharacter(pos[0] + 4, pos[1], '<')
end

func setSelection()
    selectionPos = copy(cursorPos)
    drawSelection()
end

func canPlaceCardOnTableauCard(sourceCard, destinationCard)
    if sourceCard === null || destinationCard === null
        ret false
    end
    dec sourceValue = sourceCard[CARD_VALUE]
    dec sourceSuit = sourceCard[CARD_SUIT]
    dec destinationValue = destinationCard[CARD_VALUE]
    dec destinationSuit = destinationCard[CARD_SUIT]
    ret (destinationValue == sourceValue + 1 && (sourceSuit > 1 ^^ destinationSuit > 1))
end

func canPlaceCardOnFoundationCard(sourceCard, destinationCard)
    if sourceCard === null
        ret false
    end
    dec sourceValue = sourceCard[CARD_VALUE]
    if destinationCard === null
        ret (sourceValue == 1)
    end
    dec destinationValue = destinationCard[CARD_VALUE]
    ret (destinationValue == sourceValue - 1)
end

func flipOverTableauPileCard(index)
    dec pile = tableau[index]
    if len(pile) <= 0
        ret
    end
    dec card = pile[len(pile) - 1]
    card[CARD_IS_VISIBLE] = true
end

func moveSelectionToCursor()
    eraseSelection()
    dec selectionType = selectionPos[CARD_POS_TYPE]
    dec selectionIndex = selectionPos[CARD_POS_INDEX]
    dec selectionPileIndex = selectionPos[CARD_POS_PILE_INDEX]
    dec cursorType = cursorPos[CARD_POS_TYPE]
    dec cursorIndex = cursorPos[CARD_POS_INDEX]
    dec cursorPileIndex = cursorPos[CARD_POS_PILE_INDEX]
    dec selectionCard = getCardAtPos(selectionPos, false)
    dec cursorCard = getCardAtPos(cursorPos, true)
    if selectionType == CARD_POS_TYPE_TABLEAU
        dec selectionPile = tableau[selectionIndex]
        dec count = len(selectionPile) - selectionPileIndex
        if cursorType == CARD_POS_TYPE_TABLEAU
            if canPlaceCardOnTableauCard(selectionCard, cursorCard)
                dec cursorPile = tableau[cursorIndex]
                while selectionPileIndex < len(selectionPile)
                    dec card = selectionPile[selectionPileIndex]
                    rem(selectionPile, selectionPileIndex)
                    pushElement(cursorPile, card)
                end
                eraseTableauPile(cursorIndex)
                drawTableauPile(cursorIndex)
            end
        end
        if cursorType == CARD_POS_TYPE_FOUNDATION
            if count == 1 && cursorIndex == selectionCard[CARD_SUIT] \
                    && canPlaceCardOnFoundationCard(selectionCard, cursorCard)
                rem(selectionPile, selectionPileIndex)
                dec cursorPile = foundations[cursorIndex]
                pushElement(cursorPile, selectionCard)
                drawFoundations()
            end
        end
        flipOverTableauPileCard(selectionIndex)
        eraseTableauPile(selectionIndex)
        drawTableauPile(selectionIndex)
    end
    if selectionType == CARD_POS_TYPE_DECK
        if cursorType == CARD_POS_TYPE_TABLEAU
            if canPlaceCardOnTableauCard(selectionCard, cursorCard)
                dec cursorPile = tableau[cursorIndex]
                rem(deck, deckIndex)
                deckIndex -= 1
                if deckIndex < deckStartIndex
                    deckStartIndex = deckIndex
                end
                pushElement(cursorPile, selectionCard)
                eraseTableauPile(cursorIndex)
                drawTableauPile(cursorIndex)
            end
            eraseDeck()
            drawDeck()
        end
    end
    selectionPos = null
end

func solitaire(argList)
    setMode(MODE_TEXT_ENTRY)
    setCursorPos(0, 0)
    dec posX = 0
    dec posY = 0
    while posY < boardHeight
        pressKey(' ')
        posX += 1
        if posX >= 35
            pressKey(KEY_NEWLINE)
            setMode(MODE_COMMAND)
            # Remove indentation.
            pressKey('h')
            pressKey('[')
            pressKey('d')
            setMode(MODE_TEXT_ENTRY)
            posX = 0
            posY += 1
        end
    end
    setMode(MODE_COMMAND)
    deck = []
    foundations = [[], [], [], []]
    tableau = [[], [], [], [], [], [], []]
    cursorPos = [CARD_POS_TYPE_TABLEAU, 0, 0]
    selectionPos = null
    populateDeck()
    seekBeginningOfDeck()
    dealTableau()
    drawTableau()
    drawDeck()
    drawFoundations()
    while true
        dec pos = convertCardPosToCharPos(cursorPos)
        setCursorPos(pos[0] + 1, pos[1])
        dec key = promptKey()
        if key == 'q' || key == 'Q' || key == KEY_ESCAPE
            break
        end
        if key == KEY_LEFT
            moveCursor(-1, 0)
        end
        if key == KEY_RIGHT
            moveCursor(1, 0)
        end
        if key == KEY_UP
            moveCursor(0, -1)
        end
        if key == KEY_DOWN
            moveCursor(0, 1)
        end
        if key == KEY_SPACE
            if selectionPos === null
                setSelection()
            else
                moveSelectionToCursor()
            end
        end
        if key == 'f'
            seekNextDeckCard()
            eraseDeck()
            drawDeck()
        end
    end
end

bindCommand("solitaire", solitaire)

