
START_TEST "pressKey"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey('c')
pressKey(KEY_ESCAPE)
testLog(getLineContents(0))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
abc
END_TEST

START_TEST "Bad pressKey"
pressKey([])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "pressKeys"
pressKey('t')
pressKeys("abc")
pressKeys(['0', '1', '2'])
pressKey(KEY_ESCAPE)
testLog(getLineContents(0))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
abc012
END_TEST

START_TEST "Bad pressKeys 1"
pressKeys(2)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad pressKeys 2"
pressKeys(["Bad stuff"])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "getMode"
pressKey('t')
testLog(getMode() == MODE_TEXT_ENTRY)
pressKey(KEY_ESCAPE)
testLog(getMode() == MODE_COMMAND)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
1
END_TEST

START_TEST "setMode"
setMode(MODE_TEXT_ENTRY)
testLog(getMode() == MODE_TEXT_ENTRY)
pressKey('a')
pressKey('b')
pressKey('c')
setMode(MODE_COMMAND)
testLog(getMode() == MODE_COMMAND)
testLog(getLineContents(0))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
1
abc
END_TEST

START_TEST "Bad setMode"
setMode([])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "getSelectionContents"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
pressKey(KEY_LEFT)
pressKey(KEY_LEFT)
pressKey('h')
pressKey(KEY_LEFT)
testLog(getSelectionContents())
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
bc
END_TEST

START_TEST "getLineCount"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
testLog(getLineCount())
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
2
END_TEST

START_TEST "getLineContents"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
testLog(getLineContents(0))
testLog(getLineContents(1))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
ab
cd
END_TEST

START_TEST "Bad getLineContents 1"
getLineContents([])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad getLineContents 2"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
getLineContents(-1)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad getLineContents 2"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
getLineContents(2)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "getCursorCharIndex()"
pressKey('t')
testLog(getCursorCharIndex())
pressKey('a')
testLog(getCursorCharIndex())
pressKey('b')
testLog(getCursorCharIndex())
pressKey(KEY_NEWLINE)
testLog(getCursorCharIndex())
pressKey('c')
testLog(getCursorCharIndex())
pressKey('d')
testLog(getCursorCharIndex())
pressKey(KEY_ESCAPE)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
2
0
1
2
END_TEST

START_TEST "getCursorLineIndex()"
pressKey('t')
testLog(getCursorLineIndex())
pressKey('a')
testLog(getCursorLineIndex())
pressKey('b')
testLog(getCursorLineIndex())
pressKey(KEY_NEWLINE)
testLog(getCursorLineIndex())
pressKey('c')
testLog(getCursorLineIndex())
pressKey('d')
testLog(getCursorLineIndex())
pressKey(KEY_ESCAPE)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
0
1
1
1
END_TEST

START_TEST "setCursorPos"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
setCursorPos(1, 0)
pressKey('X')
setCursorPos(2, 1)
pressKey('Y')
pressKey(KEY_ESCAPE)
testLog(getLineContents(0))
testLog(getLineContents(1))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
aXb
cdY
END_TEST

START_TEST "Bad setCursorPos 1"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
setCursorPos(-1, 0)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad setCursorPos 2"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
setCursorPos(3, 0)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad setCursorPos 3"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
setCursorPos(0, -1)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad setCursorPos 4"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
setCursorPos(0, 2)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "runCommand"
pressKey('t')
pressKey('a')
pressKey('b')
pressKey(KEY_NEWLINE)
pressKey('c')
pressKey('d')
pressKey(KEY_ESCAPE)
runCommand("goToLine", [1])
testLog(getCursorLineIndex())
runCommand("replace", ["ab", "XY"])
testLog(getLineContents(0))
dec value = runCommand("get", ["colorScheme"])
testLog(isNum(value))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
XY
1
END_TEST

START_TEST "Bad runCommand 1"
runCommand([], [1])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad runCommand 2"
runCommand("get", 3)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "bindKey 1"
func action()
    testLog(1)
    ret true
end
bindKey('7', action)
RUN_SCRIPT
PRESS_KEY 7
PRESS_KEY 7
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
1
END_TEST

START_TEST "bindKey 2"
func action()
    testLog(getLineContents(0))
    ret true
end
bindKey('7', action)
RUN_SCRIPT
PRESS_KEY t a b c ESC
PRESS_KEY 7
PRESS_KEY "\"" 7
PRESS_KEY 7
ASSERT_NO_ERROR
ASSERT_OUTPUT
abc
abc7
END_TEST

START_TEST "Bad bindKey"
func action()
    testLog(1)
    ret true
end
bindKey([], action)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "mapKey"
func action()
    testLog(getLineContents(0))
    ret true
end
bindKey('7', action)
mapKey('3', 'a', MODE_TEXT_ENTRY)
mapKey('6', 'b', MODE_COMMAND)
RUN_SCRIPT
PRESS_KEY t 1 2 3 4 5 ESC
PRESS_KEY 7
PRESS_KEY "\"" 6
PRESS_KEY 7
ASSERT_NO_ERROR
ASSERT_OUTPUT
12a45
12a456
END_TEST

START_TEST "Bad mapKey 1"
mapKey([], 'a', MODE_TEXT_ENTRY)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad mapKey 2"
mapKey('3', [], MODE_TEXT_ENTRY)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad mapKey 3"
mapKey('3', 'a', [])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "bindCommand 1"
func action(argList)
    dec value = num(argList[0]) + num(argList[1])
    testLog(value)
    ret value
end
bindCommand("findSum", action)
testLog(runCommand("findSum", [3, 5]) + 1)
RUN_SCRIPT
PRESS_KEY / f i n d S u m " " 1 0 " " 2 0 NEWLINE
ASSERT_NO_ERROR
ASSERT_OUTPUT
8
9
30
END_TEST

START_TEST "bindCommand 2"
func action1(argList)
    testLog(10)
end
func action2(argList)
    testLog(20)
end
func action3(argList)
    testLog(30)
end
func action4(argList)
    testLog(40)
end
func action5(argList)
    testLog(50)
end
bindCommand("action1", action1)
bindCommand("action2", action2)
bindCommand("action3", action3)
bindCommand("action4", action4)
bindCommand("action5", action5)
RUN_SCRIPT
PRESS_KEY / a c t i o n 5 NEWLINE
PRESS_KEY / a c t i o n 3 NEWLINE
PRESS_KEY / a c t i o n 4 NEWLINE
PRESS_KEY / a c t i o n 2 NEWLINE
PRESS_KEY / a c t i o n 1 NEWLINE
ASSERT_NO_ERROR
ASSERT_OUTPUT
50
30
40
20
10
END_TEST

START_TEST "Bad bindCommand"
func action(argList)
    testLog(argList[0])
    ret null
end
bindCommand([], action)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST
