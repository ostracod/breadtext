
START_TEST "Bad argument count 1"
testLog(isNum())
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad argument count 2"
testLog(isNum(1, 2, 3))
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "isNum"
func action()
    testLog(1)
end
testLog(isNum(null))
testLog(isNum(3))
testLog(isNum("hello"))
testLog(isNum([1, 2, 3]))
testLog(isNum(testLog))
testLog(isNum(action))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
0
0
0
0
END_TEST

START_TEST "isStr"
func action()
    testLog(1)
end
testLog(isStr(null))
testLog(isStr(3))
testLog(isStr("hello"))
testLog(isStr([1, 2, 3]))
testLog(isStr(testLog))
testLog(isStr(action))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
1
0
0
0
END_TEST

START_TEST "isList"
func action()
    testLog(1)
end
testLog(isList(null))
testLog(isList(3))
testLog(isList("hello"))
testLog(isList([1, 2, 3]))
testLog(isList(testLog))
testLog(isList(action))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
0
1
0
0
END_TEST

START_TEST "isFunc"
func action()
    testLog(1)
end
testLog(isFunc(null))
testLog(isFunc(3))
testLog(isFunc("hello"))
testLog(isFunc([1, 2, 3]))
testLog(isFunc(testLog))
testLog(isFunc(action))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
0
0
1
1
END_TEST

START_TEST "copy"
dec value1 = "hello"
dec value2 = copy(value1)
dec value3 = [10, 20, 30]
dec value4 = copy(value3)
testLog(value2)
testLog(value1 === value2)
testLog(value4)
testLog(value3 === value4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
hello
0
[10, 20, 30]
0
END_TEST

START_TEST "str"
dec value1 = str(3)
dec value2 = str("hello")
dec value3 = str([10, 20, 30])
testLog(value1)
testLog(isStr(value1))
testLog(value2)
testLog(isStr(value2))
testLog(value3)
testLog(isStr(value3))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
1
hello
1
[10, 20, 30]
1
END_TEST

START_TEST "num"
dec value1 = num(3)
dec value2 = num("5")
dec value3 = num("bad")
testLog(value1)
testLog(isNum(value1))
testLog(value2)
testLog(isNum(value2))
testLog(value3 === null)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
1
5
1
1
END_TEST

START_TEST "floor"
testLog(floor(3))
testLog(floor(3.2))
testLog(floor(3.5))
testLog(floor(3.8))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
3
3
3
END_TEST

START_TEST "Bad floor"
floor([])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "(Kagamine) len"
testLog(len("hello"))
testLog(len([1, 2, 3]))
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
5
3
END_TEST

START_TEST "Bad len"
len(3)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "ins"
dec value1 = "hello"
dec value2 = [10, 20, 30]
ins(value1, 2, 'X')
ins(value2, 1, 997)
testLog(value1)
testLog(value2)
ins(value1, 0, 'Y')
ins(value2, 0, 998)
testLog(value1)
testLog(value2)
ins(value1, 7, 'Z')
ins(value2, 5, 999)
testLog(value1)
testLog(value2)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
heXllo
[10, 997, 20, 30]
YheXllo
[998, 10, 997, 20, 30]
YheXlloZ
[998, 10, 997, 20, 30, 999]
END_TEST

START_TEST "Bad ins 1"
dec value = 3
ins(value, 0, 1)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 2"
dec value = "hello"
ins(value, "bad", 1)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 3"
dec value = "hello"
ins(value, 1, [])
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 4"
dec value = "hello"
ins(value, -1, 'X')
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 5"
dec value = "hello"
ins(value, 6, 'X')
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 6"
dec value = [10, 20, 30]
ins(value, -1, 999)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad ins 7"
dec value = [10, 20, 30]
ins(value, 4, 999)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "rem"
dec value1 = "abcde"
dec value2 = [10, 20, 30, 40, 50]
rem(value1, 2)
rem(value2, 2)
testLog(value1)
testLog(value2)
rem(value1, 0)
rem(value2, 0)
testLog(value1)
testLog(value2)
rem(value1, 2)
rem(value2, 2)
testLog(value1)
testLog(value2)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
abde
[10, 20, 40, 50]
bde
[20, 40, 50]
bd
[20, 40]
END_TEST

START_TEST "Bad rem 1"
dec value = 3
rem(value, 0)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad rem 2"
dec value = "hello"
rem(value, "bad")
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad rem 3"
dec value = "hello"
rem(value, -1)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad rem 4"
dec value = "hello"
rem(value, 5)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

