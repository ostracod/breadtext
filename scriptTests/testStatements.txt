
START_TEST "Comments"
testLog(1)
testLog(2) # Comment.
#testLog(3)
    #testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
END_TEST

START_TEST "Variable declaration"
dec value
value = 3
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Bad variable declaration"
dec value bad 
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Variable initialization"
dec value = 3
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Bad variable initialization"
dec value = 3 bad
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Line continuation"
dec\
value \
=       \
3
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "If statement"
testLog(1)
if 1
    testLog(2)
    if 1
        testLog(3)
    end
    testLog(4)
    if 0
        testLog(5)
    end
    testLog(6)
end
testLog(7)
if 0
    testLog(8)
    if 1
        testLog(9)
    end
    testLog(10)
    if 0
        testLog(11)
    end
    testLog(12)
end
testLog(13)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
3
4
6
7
13
END_TEST

START_TEST "Bad if statement 1"
if 0 1
    testLog(1)
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad if statement 2"
if 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad end statement 1"
if 0
    testLog(1)
end bad
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad end statement 2"
if 0
    testLog(1)
end
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Else statement"
testLog(1)
if 1
    testLog(2)
else
    testLog(3)
end
testLog(4)
if 0
    testLog(5)
else
    testLog(6)
end
testLog(7)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
4
6
7
END_TEST

START_TEST "Bad else statement"
else
    testLog(1)
end
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Else if statement"
testLog(1)
if 1
    testLog(2)
else if 1
    testLog(3)
else
    testLog(4)
end
testLog(5)
if 0
    testLog(6)
else if 1
    testLog(7)
else
    testLog(8)
end
testLog(9)
if 1
    testLog(10)
else if 0
    testLog(11)
else
    testLog(12)
end
testLog(13)
if 0
    testLog(14)
else if 0
    testLog(15)
else
    testLog(16)
end
testLog(17)
if 0
    testLog(18)
else if 0
    testLog(19)
else if 0
    testLog(20)
else if 0
    testLog(21)
else if 1
    testLog(22)
else
    testLog(23)
end
testLog(24)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
5
7
9
10
13
16
17
22
24
END_TEST

START_TEST "Bad else if statement"
else if 1
    testLog(1)
end
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "While statement"
dec value = 0
while value < 5
    testLog(value)
    value += 1
end
testLog("done")
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
2
3
4
done
END_TEST

START_TEST "Bad while statement"
while 1 2
    testLog(1)
end
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Break statement"
dec value = 0
while value < 5
    if value == 3
        break
    end
    testLog(value)
    value += 1
end
testLog("done")
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
2
done
END_TEST

START_TEST "Bad break statement 1"
while 1
    break bad
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad break statement 2"
break
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Continue statement"
dec value = 0
while value < 5
    value += 1
    if value == 3
        continue
    end
    testLog(value)
end
testLog("done")
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
4
5
done
END_TEST

START_TEST "Bad continue statement 1"
while 1
    continue bad
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad continue statement 2"
continue
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Function statement 1"
testLog(1)
func action()
    testLog(2)
end
testLog(3)
action()
testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
3
2
4
END_TEST

START_TEST "Function statement 2"
dec value3 = 10
func action(value1, value2)
    testLog(value1)
    testLog(value2)
    dec value3 = 20
    testLog(value3)
end
action(30, 40)
testLog(value3)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
30
40
20
10
END_TEST

START_TEST "Function statement 3"
testLog(1)
func action1()
    testLog(2)
    action2()
    testLog(3)
end
testLog(4)
func action2()
    testLog(5)
end
testLog(6)
action1()
testLog(7)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
4
6
2
5
3
7
END_TEST

START_TEST "Bad function statement 1"
func
    testLog(2)
end
action()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function statement 2"
func action
    testLog(2)
end
action()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function statement 3"
func action(
    testLog(2)
end
action()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function statement 4"
func action(value, )
    testLog(2)
end
action(10)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function statement 5"
func action() bad
    testLog(2)
end
action()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Return statement 1"
testLog(1)
func action()
    testLog(2)
    if 1
        ret
    end
    testLog(3)
end
testLog(4)
action()
testLog(5)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
4
2
5
END_TEST

START_TEST "Return statement 2"
testLog(1)
func action()
    testLog(2)
    if 1
        ret 10
    end
    testLog(3)
end
testLog(4)
dec value = action()
testLog(5)
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
4
2
5
10
END_TEST

START_TEST "Return statement 3"
dec value3 = 10
func action(value1, value2)
    testLog(value1)
    testLog(value2)
    dec value3 = 20
    testLog(value3)
    ret
    testLog(123)
end
action(30, 40)
testLog(value3)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
30
40
20
10
END_TEST

START_TEST "Bad return statement 1"
func action()
    ret 1 2
end
action()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad return statement 2"
ret
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Import statement 1"
testLog(1)
import "./scriptTestImport.btsl"
    share value1, value2
end
testLog(2)
testLog(value1)
testLog(3)
testLog(value2)
testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
10
3
20
4
END_TEST

START_TEST "Import statement 2"
testLog(1)
import "./scriptTestImport.btsl"
    share value1
    share value2
end
testLog(2)
testLog(value1)
testLog(3)
testLog(value2)
testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
10
3
20
4
END_TEST

START_TEST "Bad import statement 1"
import
    share value1, value2
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad import statement 2"
import 3
    share value1, value2
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad import statement 3"
import "./scriptTestImport.btsl" "bad"
    share value1, value2
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad import statement 4"
import "./scriptTestImport.btsl" 
    share value1
    testLog(1)
    share value2
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad share statement 1"
import "./scriptTestImport.btsl" 
    share
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad share statement 2"
import "./scriptTestImport.btsl" 
    share value1,
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad share statement 2"
import "./scriptTestImport.btsl" 
    share value1 value2
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Greedy dirtbag statement"
testLog(1)
import "./scriptTestImport.btsl"
    greedy dirtbag
end
testLog(2)
testLog(value1)
testLog(3)
testLog(value2)
testLog(4)
testLog(value3)
testLog(5)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
2
10
3
20
4
30
5
END_TEST

START_TEST "Bad greedy dirtbag statement 1"
import "./scriptTestImport.btsl"
    greedy
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad greedy dirtbag statement 2"
import "./scriptTestImport.btsl"
    greedy dirtbag bad
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad greedy dirtbag statement 2"
dev value1 = 999
import "./scriptTestImport.btsl"
    greedy dirtbag
end
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST
