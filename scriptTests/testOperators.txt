
START_TEST "Bad binary operator 1"
1 &&
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad binary operator 2"
&& 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad unary operator"
!
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Assignment operator 1"
dec value
value = 10
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
10
END_TEST

START_TEST "Assignment operator 2"
dec value = [1, 2, 3]
value[1] = 10
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
[1, 10, 3]
END_TEST

START_TEST "Assignment operator 3"
dec value = "abc"
value[1] = 'X'
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
aXc
END_TEST

START_TEST "Bad assignment operator"
1 = 3
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Addition operator 1"
dec value
value = 1 + 2
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Addition operator 2"
dec value
value = "Bread" + "Text"
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
BreadText
END_TEST

START_TEST "Bad addition operator 1"
1 + []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition operator 2"
[] + 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition operator 3"
"text" + 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition operator 4"
1 + "text"
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Addition assignment operator 1"
dec value = 1
value += 2
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Addition assignment operator 2"
dec value = "Bread"
value += "Text"
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
BreadText
END_TEST

START_TEST "Bad addition assignment operator 1"
1 += 2
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition assignment operator 2"
dec value = 1
value += []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition assignment operator 3"
dec value = []
value += 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition assignment operator 4"
dec value = 1
value += "text"
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad addition assignment operator 5"
dec value = "text"
value += 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Subtraction operator"
dec value
value = 10 - 4
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
6
END_TEST

START_TEST "Bad subtraction operator 1"
[] - 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad subtraction operator 2"
1 - []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Negation operator"
dec value
value = -6
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
-6
END_TEST

START_TEST "Bad negation operator"
-[]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Subtraction assignment operator"
dec value = 10
value -= 4
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
6
END_TEST

START_TEST "Bad subtraction assignment operator 1"
3 -= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad subtraction assignment operator 2"
dec value = 1
value -= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad subtraction assignment operator 3"
dec value = []
value -= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Multiplication operator"
dec value
value = 10 * 4
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
40
END_TEST

START_TEST "Bad multiplication operator 1"
[] * 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad multiplication operator 2"
1 * []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Multiplication assignment operator"
dec value = 10
value *= 4
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
40
END_TEST

START_TEST "Bad multiplication assignment operator 1"
3 *= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad multiplication assignment operator 2"
dec value = 1
value *= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad multiplication assignment operator 3"
dec value = []
value *= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Division operator"
dec value
value = 8 / 2
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
4
END_TEST

START_TEST "Bad division operator 1"
[] / 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad division operator 2"
1 / []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad division operator 3"
1 / 0
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Division assignment operator"
dec value = 8
value /= 2
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
4
END_TEST

START_TEST "Bad division assignment operator 1"
3 /= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad division assignment operator 2"
dec value = 1
value /= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad division assignment operator 3"
dec value = []
value /= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad division assignment operator 4"
dec value = 1
value /= 0
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Modulus operator"
dec value
value = 12 % 5
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
2
END_TEST

START_TEST "Bad modulus operator 1"
[] % 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad modulus operator 2"
1 % []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad modulus operator 3"
1 % 0
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Modulus assignment operator"
dec value = 12
value %= 5
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
2
END_TEST

START_TEST "Bad modulus assignment operator 1"
3 %= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad modulus assignment operator 2"
dec value = 1
value %= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad modulus assignment operator 3"
dec value = []
value %= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad modulus assignment operator 4"
dec value = 1
value %= 0
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean AND operator"
testLog(0 && 0)
testLog(1 && 0)
testLog(0 && 1)
testLog(1 && 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
0
1
END_TEST

START_TEST "Bad boolean AND operator 1"
[] && 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean AND operator 2"
1 && []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean AND assignment operator"
dec value
value = 0
value &&= 0
testLog(value)
value = 1
value &&= 0
testLog(value)
value = 0
value &&= 1
testLog(value)
value = 1
value &&= 1
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
0
1
END_TEST

START_TEST "Bad boolean AND assignment operator 1"
3 &&= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean AND assignment operator 2"
dec value = 1
value &&= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean AND assignment operator 3"
dec value = []
value &&= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean OR operator"
testLog(0 || 0)
testLog(1 || 0)
testLog(0 || 1)
testLog(1 || 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
1
1
END_TEST

START_TEST "Bad boolean OR operator 1"
[] || 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean OR operator 2"
1 || []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean OR assignment operator"
dec value
value = 0
value ||= 0
testLog(value)
value = 1
value ||= 0
testLog(value)
value = 0
value ||= 1
testLog(value)
value = 1
value ||= 1
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
1
1
END_TEST

START_TEST "Bad boolean OR assignment operator 1"
3 ||= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean OR assignment operator 2"
dec value = 1
value ||= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean OR assignment operator 3"
dec value = []
value ||= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean XOR operator"
testLog(0 ^^ 0)
testLog(1 ^^ 0)
testLog(0 ^^ 1)
testLog(1 ^^ 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
1
0
END_TEST

START_TEST "Bad boolean XOR operator 1"
[] ^^ 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean XOR operator 2"
1 ^^ []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean XOR assignment operator"
dec value
value = 0
value ^^= 0
testLog(value)
value = 1
value ^^= 0
testLog(value)
value = 0
value ^^= 1
testLog(value)
value = 1
value ^^= 1
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
1
0
END_TEST

START_TEST "Bad boolean XOR assignment operator 1"
3 ^^= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean XOR assignment operator 2"
dec value = 1
value ^^= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad boolean XOR assignment operator 3"
dec value = []
value ^^= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Boolean NOT operator"
testLog(!0)
testLog(!1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
0
END_TEST

START_TEST "Bad boolean NOT operator"
![]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise AND operator"
testLog(3 & 5)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
END_TEST

START_TEST "Bad bitwise AND operator 1"
[] & 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise AND operator 2"
1 & []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise AND assignment operator"
dec value
value = 3
value &= 5
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
END_TEST

START_TEST "Bad bitwise AND assignment operator 1"
3 &= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise AND assignment operator 2"
dec value = 1
value &= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise AND assignment operator 3"
dec value = []
value &= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise OR operator"
testLog(3 | 5)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
7
END_TEST

START_TEST "Bad bitwise OR operator 1"
[] | 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise OR operator 2"
1 | []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise OR assignment operator"
dec value
value = 3
value |= 5
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
7
END_TEST

START_TEST "Bad bitwise OR assignment operator 1"
3 |= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise OR assignment operator 2"
dec value = 1
value |= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise OR assignment operator 3"
dec value = []
value |= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise XOR operator"
testLog(3 ^ 5)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
6
END_TEST

START_TEST "Bad bitwise XOR operator 1"
[] ^ 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise XOR operator 2"
1 ^ []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise XOR assignment operator"
dec value
value = 3
value ^= 5
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
6
END_TEST

START_TEST "Bad bitwise XOR assignment operator 1"
3 ^= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise XOR assignment operator 2"
dec value = 1
value ^= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitwise XOR assignment operator 3"
dec value = []
value ^= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitwise NOT operator"
testLog((~1) & 3)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
2
END_TEST

START_TEST "Bad bitwise NOT operator"
~[]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitshift left operator"
testLog(6 << 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
12
END_TEST

START_TEST "Bad bitshift left operator 1"
[] << 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift left operator 2"
1 << []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitshift left assignment operator"
dec value
value = 6
value <<= 1
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
12
END_TEST

START_TEST "Bad bitshift left assignment operator 1"
3 <<= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift left assignment operator 2"
dec value = 1
value <<= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift left assignment operator 3"
dec value = []
value <<= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitshift right operator"
testLog(6 >> 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Bad bitshift right operator 1"
[] >> 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift right operator 2"
1 >> []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bitshift right assignment operator"
dec value
value = 6
value >>= 1
testLog(value)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
3
END_TEST

START_TEST "Bad bitshift right assignment operator 1"
3 >>= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift right assignment operator 2"
dec value = 1
value >>= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad bitshift right assignment operator 3"
dec value = []
value >>= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Less than operator"
testLog(1 < 2)
testLog(1 < 1)
testLog(2 < 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
0
0
END_TEST

START_TEST "Bad less than operator 1"
[] < 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad less than operator 2"
1 < []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Greater than operator"
testLog(1 > 2)
testLog(1 > 1)
testLog(2 > 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
0
1
END_TEST

START_TEST "Bad greater than operator 1"
[] > 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad greater than operator 2"
1 > []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Less than or equal operator"
testLog(1 <= 2)
testLog(1 <= 1)
testLog(2 <= 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
1
0
END_TEST

START_TEST "Bad less than or equal operator 1"
[] <= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad less than or equal operator 2"
1 <= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Greater than or equal operator"
testLog(1 >= 2)
testLog(1 >= 1)
testLog(2 >= 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
1
END_TEST

START_TEST "Bad greater than or equal operator 1"
[] >= 1
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad greater than or equal operator 2"
1 >= []
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Equal operator"
testLog(1 == 1)
testLog(1 == 2)
testLog("bread" == "bread")
testLog("bread" == "text")
testLog([1, 2, 3] == [1, 2, 3])
testLog([1, 2, 3] == [10, 20, 30])
testLog("bread" == 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
0
1
0
1
0
0
END_TEST

START_TEST "Not equal operator"
testLog(1 != 1)
testLog(1 != 2)
testLog("bread" != "bread")
testLog("bread" != "text")
testLog([1, 2, 3] != [1, 2, 3])
testLog([1, 2, 3] != [10, 20, 30])
testLog("bread" != 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
0
1
0
1
1
END_TEST

START_TEST "Identical operator"
dec value1 = "bread"
dec value2 = value1
dec value3 = [1, 2, 3]
dec value4 = value3
testLog(1 === 1)
testLog(1 === 2)
testLog(value1 === value2)
testLog("bread" === "bread")
testLog("bread" === "text")
testLog(value3 === value4)
testLog([1, 2, 3] === [1, 2, 3])
testLog([1, 2, 3] === [10, 20, 30])
testLog("bread" === 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
0
1
0
0
1
0
0
0
END_TEST

START_TEST "Not identical operator"
dec value1 = "bread"
dec value2 = value1
dec value3 = [1, 2, 3]
dec value4 = value3
testLog(1 !== 1)
testLog(1 !== 2)
testLog(value1 !== value2)
testLog("bread" !== "bread")
testLog("bread" !== "text")
testLog(value3 !== value4)
testLog([1, 2, 3] !== [1, 2, 3])
testLog([1, 2, 3] !== [10, 20, 30])
testLog("bread" !== 1)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
0
1
0
1
1
0
1
1
1
END_TEST

START_TEST "Increment operator"
dec value1 = 5
dec value2 = "abc"
testLog(value1++)
testLog(value1)
testLog((value2[1])++)
testLog(value2[1])
testLog(++value1)
testLog(value1)
testLog(++(value2[1]))
testLog(value2[1])
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
5
6
98
99
7
7
100
100
END_TEST

START_TEST "Bad increment operator 1"
5++
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad increment operator 2"
++5
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad increment operator 3"
dec value = []
value++
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad increment operator 3"
dec value = []
++value
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Decrement operator"
dec value1 = 5
dec value2 = "abc"
testLog(value1--)
testLog(value1)
testLog((value2[1])--)
testLog(value2[1])
testLog(--value1)
testLog(value1)
testLog(--(value2[1]))
testLog(value2[1])
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
5
4
98
97
3
3
96
96
END_TEST

START_TEST "Bad decrement operator 1"
5--
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad decrement operator 2"
--5
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad decrement operator 3"
dec value = []
value--
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad decrement operator 3"
dec value = []
--value
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Index operator"
dec value1 = "abcde"
dec value2 = [10, 20, 30, 40, 50]
testLog(value1[2])
testLog(value2[2])
value1[2] = 'X'
value2[2] = 999
testLog(value1)
testLog(value2)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
99
30
abXde
[10, 20, 999, 40, 50]
END_TEST

START_TEST "Invalid index operator 1"
dec value = 5
value[2]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 2"
dec value = "abcde"
value[-1]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 3"
dec value = "abcde"
value[5]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 4"
dec value = [10, 20, 30, 40, 50]
value[-1]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 5"
dec value = [10, 20, 30, 40, 50]
value[5]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 6"
dec value = [10, 20, 30, 40, 50]
value["soap"]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 7"
dec value = [10, 20, 30, 40, 50]
value[
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 8"
dec value = [10, 20, 30, 40, 50]
value[2
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Invalid index operator 9"
dec value = [10, 20, 30, 40, 50]
value[2 5]
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Function invocation statement 1"
testLog(1)
func action()
    testLog(2)
end
testLog(3)
action()
testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
3
2
4
END_TEST

START_TEST "Function invocation statement 2"
testLog(1)
func action(value1, value2)
    testLog(2)
end
testLog(3)
action(10, 20)
testLog(4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
1
3
2
4
END_TEST

START_TEST "Bad function invocation statement 1"
5()
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 2"
func action()
    testLog(1)
end
action(5)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 3"
func action(value1, value2)
    testLog(1)
end
action(5)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 4"
func action(value1, value2)
    testLog(1)
end
action(
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 5"
func action(value1, value2)
    testLog(1)
end
action(5, 
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 6"
func action(value1, value2)
    testLog(1)
end
action(5, )
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad function invocation statement 7"
func action(value1, value2)
    testLog(1)
end
action(5, 5 5)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Order of operations"
testLog(10 - 2 - 1)
testLog(2 * 3 + 4)
testLog(2 + 3 * 4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
7
10
14
END_TEST

START_TEST "Parentheses"
testLog(2 * (3 + 4))
testLog((2 + 3) * 4)
RUN_SCRIPT
ASSERT_NO_ERROR
ASSERT_OUTPUT
14
20
END_TEST

START_TEST "Bad parentheses 1"
(
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad parentheses 2"
(10
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST

START_TEST "Bad parentheses 3"
(10 20)
RUN_SCRIPT
ASSERT_ERROR
ASSERT_OUTPUT
END_TEST
